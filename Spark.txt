Using username "hadoop".
Authenticating with public key "imported-openssh-key"
Last login: Sun Mar  5 15:30:25 2023

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
1 package(s) needed for security, out of 8 available
Run "sudo yum update" to apply all updates.

EEEEEEEEEEEEEEEEEEEE MMMMMMMM           MMMMMMMM RRRRRRRRRRRRRRR
E::::::::::::::::::E M:::::::M         M:::::::M R::::::::::::::R
EE:::::EEEEEEEEE:::E M::::::::M       M::::::::M R:::::RRRRRR:::::R
  E::::E       EEEEE M:::::::::M     M:::::::::M RR::::R      R::::R
  E::::E             M::::::M:::M   M:::M::::::M   R:::R      R::::R
  E:::::EEEEEEEEEE   M:::::M M:::M M:::M M:::::M   R:::RRRRRR:::::R
  E::::::::::::::E   M:::::M  M:::M:::M  M:::::M   R:::::::::::RR
  E:::::EEEEEEEEEE   M:::::M   M:::::M   M:::::M   R:::RRRRRR::::R
  E::::E             M:::::M    M:::M    M:::::M   R:::R      R::::R
  E::::E       EEEEE M:::::M     MMM     M:::::M   R:::R      R::::R
EE:::::EEEEEEEE::::E M:::::M             M:::::M   R:::R      R::::R
E::::::::::::::::::E M:::::M             M:::::M RR::::R      R::::R
EEEEEEEEEEEEEEEEEEEE MMMMMMM             MMMMMMM RRRRRRR      RRRRRR

[hadoop@ip-172-31-36-86 ~]$ spark-shell
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
23/03/05 15:47:16 WARN Client: Neither spark.yarn.jars nor spark.yarn.archive is set, falling back to uploading libraries under SPARK_HOME.
23/03/05 15:47:29 WARN YarnSchedulerBackend$YarnSchedulerEndpoint: Attempted to request executors before the AM has registered!
Spark context Web UI available at http://ip-172-31-36-86.ec2.internal:4040
Spark context available as 'sc' (master = yarn, app id = application_1678029948188_0002).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.4.8-amzn-2
      /_/

Using Scala version 2.11.12 (OpenJDK 64-Bit Server VM, Java 1.8.0_362)
Type in expressions to have them evaluated.
Type :help for more information.

scala> val df = spark.read.format("csv").option("header","true").option("header","true").load("s3://assignmentbucket4/Input/DelayedFlights-updated.csv")
df: org.apache.spark.sql.DataFrame = [_c0: string, Year: string ... 28 more fields]

scala> df show()
23/03/05 15:49:03 WARN Utils: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting 'spark.debug.maxToStringFields' in SparkEnv.conf.
+---+----+-----+----------+---------+-------+----------+-------+----------+-------------+---------+-------+-----------------+--------------+-------+--------+--------+------+----+--------+------+-------+---------+----------------+--------+------------+------------+--------+-------------+-----------------+
|_c0|Year|Month|DayofMonth|DayOfWeek|DepTime|CRSDepTime|ArrTime|CRSArrTime|UniqueCarrier|FlightNum|TailNum|ActualElapsedTime|CRSElapsedTime|AirTime|ArrDelay|DepDelay|Origin|Dest|Distance|TaxiIn|TaxiOut|Cancelled|CancellationCode|Diverted|CarrierDelay|WeatherDelay|NASDelay|SecurityDelay|LateAircraftDelay|
+---+----+-----+----------+---------+-------+----------+-------+----------+-------------+---------+-------+-----------------+--------------+-------+--------+--------+------+----+--------+------+-------+---------+----------------+--------+------------+------------+--------+-------------+-----------------+
|  1|2003|    6|        17|        2|   1310|      1255|   1612|      1615|           AA|     1362| N4YPAA|              122|           140|     93|      -3|      15|   ORD| JFK|     740|     6|     23|        0|               N|       0|        null|        null|    null|         null|             null|
|  2|2003|    6|        20|        5|   1303|      1255|   1623|      1615|           AA|     1362| N4XBAA|              140|           140|    100|       8|       8|   ORD| JFK|     740|    11|     29|        0|               N|       0|        null|        null|    null|         null|             null|
|  3|2003|    6|        22|        7|   1325|      1255|   1953|      1615|           AA|     1362| N569AA|              328|           140|    113|     218|      30|   ORD| JFK|     740|     9|    206|        0|               N|       0|           0|           0|     218|            0|                0|
|  4|2003|    6|        23|        1|   1328|      1255|   1655|      1615|           AA|     1362| N4YUAA|              147|           140|    107|      40|      33|   ORD| JFK|     740|     8|     32|        0|               N|       0|           0|           0|      40|            0|                0|
|  5|2003|    6|        25|        3|   1307|      1255|   1620|      1615|           AA|     1362| N519AA|              133|           140|    101|       5|      12|   ORD| JFK|     740|    12|     20|        0|               N|       0|        null|        null|    null|         null|             null|
|  6|2003|    6|         5|        4|   1208|      1155|   1459|      1455|           AA|     1363| N4YTAA|              231|           240|    213|       4|      13|   BOS| DFW|    1562|     7|     11|        0|               N|       0|        null|        null|    null|         null|             null|
|  7|2003|    6|         7|        6|   1207|      1155|   1451|      1455|           AA|     1363| N593AA|              224|           240|    203|      -4|      12|   BOS| DFW|    1562|     4|     17|        0|               N|       0|        null|        null|    null|         null|             null|
|  8|2003|    6|         8|        7|   1206|      1155|   1445|      1455|           AA|     1363| N4WAAA|              219|           240|    204|     -10|      11|   BOS| DFW|    1562|     5|     10|        0|               N|       0|        null|        null|    null|         null|             null|
|  9|2003|    6|        15|        7|   1202|      1155|   1504|      1455|           AA|     1363| N589AA|              242|           240|    216|       9|       7|   BOS| DFW|    1562|     8|     18|        0|               N|       0|        null|        null|    null|         null|             null|
| 10|2003|    6|        23|        1|   1207|      1155|   1513|      1455|           AA|     1363| N4XNAA|              246|           240|    215|      18|      12|   BOS| DFW|    1562|    11|     20|        0|               N|       0|           8|           0|       6|            0|                4|
| 11|2003|    6|        28|        6|   1209|      1155|   1511|      1455|           AA|     1363| N4XCAA|              242|           240|    209|      16|      14|   BOS| DFW|    1562|    18|     15|        0|               N|       0|           0|           0|       2|            0|               14|
| 12|2003|    6|         2|        1|   1726|      1715|   2024|      2005|           AA|     1366| N584AA|              118|           110|     77|      19|      11|   COS| DFW|     592|    19|     22|        0|               N|       0|           0|           0|       8|            0|               11|
| 13|2003|    6|         6|        5|   1748|      1715|   2029|      2005|           AA|     1366| N462AA|              101|           110|     82|      24|      33|   COS| DFW|     592|     8|     11|        0|               N|       0|           0|           0|       0|            0|               24|
| 14|2003|    6|         9|        1|   1828|      1715|   2109|      2005|           AA|     1366| N530AA|              101|           110|     80|      64|      73|   COS| DFW|     592|     7|     14|        0|               N|       0|           0|           0|       3|            0|               61|
| 15|2003|    6|        14|        6|   1724|      1715|   1958|      2005|           AA|     1366| N541AA|               94|           110|     72|      -7|       9|   COS| DFW|     592|     9|     13|        0|               N|       0|        null|        null|    null|         null|             null|
| 16|2003|    6|        16|        1|   1747|      1715|   2042|      2005|           AA|     1366| N522AA|              115|           110|     77|      37|      32|   COS| DFW|     592|    26|     12|        0|               N|       0|           0|           0|       5|            0|               32|
| 17|2003|    6|        19|        4|   1931|      1715|   2208|      2005|           AA|     1366| N570AA|               97|           110|     77|     123|     136|   COS| DFW|     592|     8|     12|        0|               N|       0|           0|           0|       0|            0|              123|
| 18|2003|    6|        20|        5|   1847|      1715|   2128|      2005|           AA|     1366| N511AA|              101|           110|     79|      83|      92|   COS| DFW|     592|    10|     12|        0|               N|       0|           0|           0|       0|            0|               83|
| 19|2003|    6|        21|        6|   1745|      1715|   2025|      2005|           AA|     1366| N587AA|              100|           110|     78|      20|      30|   COS| DFW|     592|     8|     14|        0|               N|       0|           0|           0|       0|            0|               20|
| 20|2003|    6|        22|        7|   1724|      1715|   2003|      2005|           AA|     1366| N558AA|               99|           110|     77|      -2|       9|   COS| DFW|     592|    11|     11|        0|               N|       0|        null|        null|    null|         null|             null|
+---+----+-----+----------+---------+-------+----------+-------+----------+-------------+---------+-------+-----------------+--------------+-------+--------+--------+------+----+--------+------+-------+---------+----------------+--------+------------+------------+--------+-------------+-----------------+
only showing top 20 rows


scala> import org.apache.spark.sql.types._
import org.apache.spark.sql.types._

scala> import org.apache.spark.sql.functions._
import org.apache.spark.sql.functions._

scala> df.createOrReplaceTempView("DelayedFlights")

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((CarrierDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
23/03/05 15:50:19 WARN HiveConf: HiveConf of name hive.server2.thrift.url does not exist
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(CarrierDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    24.557549755575373|
|2004|                                                                     43.64459443230066|
|2005|                                                                     28.01977637202288|
|2006|                                                                    30.453296261292596|
|2007|                                                                    19.850007017971283|
|2008|                                                                     28.88346981456985|
|2009|                                                                     28.33058554239575|
|2010|                                                                     21.89310246015957|
+----+--------------------------------------------------------------------------------------+

Time taken: 11145 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((CarrierDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(CarrierDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    24.557549755575373|
|2004|                                                                     43.64459443230066|
|2005|                                                                     28.01977637202288|
|2006|                                                                    30.453296261292596|
|2007|                                                                    19.850007017971283|
|2008|                                                                     28.88346981456985|
|2009|                                                                     28.33058554239575|
|2010|                                                                     21.89310246015957|
+----+--------------------------------------------------------------------------------------+

Time taken: 725 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((CarrierDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(CarrierDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    24.557549755575373|
|2004|                                                                     43.64459443230066|
|2005|                                                                     28.01977637202288|
|2006|                                                                    30.453296261292596|
|2007|                                                                    19.850007017971283|
|2008|                                                                     28.88346981456985|
|2009|                                                                     28.33058554239575|
|2010|                                                                     21.89310246015957|
+----+--------------------------------------------------------------------------------------+

Time taken: 724 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((CarrierDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(CarrierDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    24.557549755575373|
|2004|                                                                     43.64459443230066|
|2005|                                                                     28.01977637202288|
|2006|                                                                    30.453296261292596|
|2007|                                                                    19.850007017971283|
|2008|                                                                     28.88346981456985|
|2009|                                                                     28.33058554239575|
|2010|                                                                     21.89310246015957|
+----+--------------------------------------------------------------------------------------+

Time taken: 571 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((CarrierDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(CarrierDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    24.557549755575373|
|2004|                                                                     43.64459443230066|
|2005|                                                                     28.01977637202288|
|2006|                                                                    30.453296261292596|
|2007|                                                                    19.850007017971283|
|2008|                                                                     28.88346981456985|
|2009|                                                                     28.33058554239575|
|2010|                                                                     21.89310246015957|
+----+--------------------------------------------------------------------------------------+

Time taken: 570 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((NASDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+----------------------------------------------------------------------------------+
|Year|avg(((CAST(NASDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+----------------------------------------------------------------------------------+
|2003|                                                                29.686276314267346|
|2004|                                                                 18.24570061769958|
|2005|                                                                 16.63868805373129|
|2006|                                                                18.119312329937703|
|2007|                                                                30.625925917941924|
|2008|                                                                 30.16552562594132|
|2009|                                                                 37.63093330628511|
|2010|                                                                 33.87351363404217|
+----+----------------------------------------------------------------------------------+

Time taken: 8812 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((NASDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+----------------------------------------------------------------------------------+
|Year|avg(((CAST(NASDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+----------------------------------------------------------------------------------+
|2003|                                                                29.686276314267346|
|2004|                                                                 18.24570061769958|
|2005|                                                                 16.63868805373129|
|2006|                                                                18.119312329937703|
|2007|                                                                30.625925917941924|
|2008|                                                                 30.16552562594132|
|2009|                                                                 37.63093330628511|
|2010|                                                                 33.87351363404217|
+----+----------------------------------------------------------------------------------+

Time taken: 645 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((NASDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+----------------------------------------------------------------------------------+
|Year|avg(((CAST(NASDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+----------------------------------------------------------------------------------+
|2003|                                                                29.686276314267346|
|2004|                                                                 18.24570061769958|
|2005|                                                                 16.63868805373129|
|2006|                                                                18.119312329937703|
|2007|                                                                30.625925917941924|
|2008|                                                                 30.16552562594132|
|2009|                                                                 37.63093330628511|
|2010|                                                                 33.87351363404217|
+----+----------------------------------------------------------------------------------+

Time taken: 583 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((NASDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+----------------------------------------------------------------------------------+
|Year|avg(((CAST(NASDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+----------------------------------------------------------------------------------+
|2003|                                                                29.686276314267346|
|2004|                                                                 18.24570061769958|
|2005|                                                                 16.63868805373129|
|2006|                                                                18.119312329937703|
|2007|                                                                30.625925917941924|
|2008|                                                                 30.16552562594132|
|2009|                                                                 37.63093330628511|
|2010|                                                                 33.87351363404217|
+----+----------------------------------------------------------------------------------+

Time taken: 478 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((NASDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+----------------------------------------------------------------------------------+
|Year|avg(((CAST(NASDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+----------------------------------------------------------------------------------+
|2003|                                                                29.686276314267346|
|2004|                                                                 18.24570061769958|
|2005|                                                                 16.63868805373129|
|2006|                                                                18.119312329937703|
|2007|                                                                30.625925917941924|
|2008|                                                                 30.16552562594132|
|2009|                                                                 37.63093330628511|
|2010|                                                                 33.87351363404217|
+----+----------------------------------------------------------------------------------+

Time taken: 529 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((WeatherDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(WeatherDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    7.8319479664511205|
|2004|                                                                    6.4475279976916555|
|2005|                                                                      5.85069715149616|
|2006|                                                                     4.588604183967953|
|2007|                                                                     4.042975783210287|
|2008|                                                                    3.7254490054008955|
|2009|                                                                   0.45316615137982363|
|2010|                                                                    2.9023312955584664|
+----+--------------------------------------------------------------------------------------+

Time taken: 619 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((WeatherDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(WeatherDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    7.8319479664511205|
|2004|                                                                    6.4475279976916555|
|2005|                                                                      5.85069715149616|
|2006|                                                                     4.588604183967953|
|2007|                                                                     4.042975783210287|
|2008|                                                                    3.7254490054008955|
|2009|                                                                   0.45316615137982363|
|2010|                                                                    2.9023312955584664|
+----+--------------------------------------------------------------------------------------+

Time taken: 360 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((WeatherDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(WeatherDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    7.8319479664511205|
|2004|                                                                    6.4475279976916555|
|2005|                                                                      5.85069715149616|
|2006|                                                                     4.588604183967953|
|2007|                                                                     4.042975783210287|
|2008|                                                                    3.7254490054008955|
|2009|                                                                   0.45316615137982363|
|2010|                                                                    2.9023312955584664|
+----+--------------------------------------------------------------------------------------+

Time taken: 466 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((WeatherDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(WeatherDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    7.8319479664511205|
|2004|                                                                    6.4475279976916555|
|2005|                                                                      5.85069715149616|
|2006|                                                                     4.588604183967953|
|2007|                                                                     4.042975783210287|
|2008|                                                                    3.7254490054008955|
|2009|                                                                   0.45316615137982363|
|2010|                                                                    2.9023312955584664|
+----+--------------------------------------------------------------------------------------+

Time taken: 340 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((WeatherDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+--------------------------------------------------------------------------------------+
|Year|avg(((CAST(WeatherDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+--------------------------------------------------------------------------------------+
|2003|                                                                    7.8319479664511205|
|2004|                                                                    6.4475279976916555|
|2005|                                                                      5.85069715149616|
|2006|                                                                     4.588604183967953|
|2007|                                                                     4.042975783210287|
|2008|                                                                    3.7254490054008955|
|2009|                                                                   0.45316615137982363|
|2010|                                                                    2.9023312955584664|
+----+--------------------------------------------------------------------------------------+

Time taken: 503 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((LateAircraftDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+-------------------------------------------------------------------------------------------+
|Year|avg(((CAST(LateAircraftDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+-------------------------------------------------------------------------------------------+
|2003|                                                                         37.924225963706164|
|2004|                                                                         31.662176952308105|
|2005|                                                                         49.490838422749654|
|2006|                                                                         46.838787224801735|
|2007|                                                                         45.252432744291134|
|2008|                                                                          37.22555555408794|
|2009|                                                                         33.585314999939314|
|2010|                                                                         41.331052610239794|
+----+-------------------------------------------------------------------------------------------+

Time taken: 438 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((LateAircraftDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+-------------------------------------------------------------------------------------------+
|Year|avg(((CAST(LateAircraftDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+-------------------------------------------------------------------------------------------+
|2003|                                                                         37.924225963706164|
|2004|                                                                         31.662176952308105|
|2005|                                                                         49.490838422749654|
|2006|                                                                         46.838787224801735|
|2007|                                                                         45.252432744291134|
|2008|                                                                          37.22555555408794|
|2009|                                                                         33.585314999939314|
|2010|                                                                         41.331052610239794|
+----+-------------------------------------------------------------------------------------------+

Time taken: 353 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((LateAircraftDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+-------------------------------------------------------------------------------------------+
|Year|avg(((CAST(LateAircraftDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+-------------------------------------------------------------------------------------------+
|2003|                                                                         37.924225963706164|
|2004|                                                                         31.662176952308105|
|2005|                                                                         49.490838422749654|
|2006|                                                                         46.838787224801735|
|2007|                                                                         45.252432744291134|
|2008|                                                                          37.22555555408794|
|2009|                                                                         33.585314999939314|
|2010|                                                                         41.331052610239794|
+----+-------------------------------------------------------------------------------------------+

Time taken: 309 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((LateAircraftDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+-------------------------------------------------------------------------------------------+
|Year|avg(((CAST(LateAircraftDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+-------------------------------------------------------------------------------------------+
|2003|                                                                         37.924225963706164|
|2004|                                                                         31.662176952308105|
|2005|                                                                         49.490838422749654|
|2006|                                                                         46.838787224801735|
|2007|                                                                         45.252432744291134|
|2008|                                                                          37.22555555408794|
|2009|                                                                         33.585314999939314|
|2010|                                                                         41.331052610239794|
+----+-------------------------------------------------------------------------------------------+

Time taken: 320 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((LateAircraftDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+-------------------------------------------------------------------------------------------+
|Year|avg(((CAST(LateAircraftDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+-------------------------------------------------------------------------------------------+
|2003|                                                                         37.924225963706164|
|2004|                                                                         31.662176952308105|
|2005|                                                                         49.490838422749654|
|2006|                                                                         46.838787224801735|
|2007|                                                                         45.252432744291134|
|2008|                                                                          37.22555555408794|
|2009|                                                                         33.585314999939314|
|2010|                                                                         41.331052610239794|
+----+-------------------------------------------------------------------------------------------+

Time taken: 442 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((SecurityDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+---------------------------------------------------------------------------------------+
|Year|avg(((CAST(SecurityDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+---------------------------------------------------------------------------------------+
|2003|                                                                                    0.0|
|2004|                                                                                    0.0|
|2005|                                                                                    0.0|
|2006|                                                                                    0.0|
|2007|                                                                    0.22865853658536586|
|2008|                                                                                    0.0|
|2009|                                                                                    0.0|
|2010|                                                                                    0.0|
+----+---------------------------------------------------------------------------------------+

Time taken: 400 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((SecurityDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+---------------------------------------------------------------------------------------+
|Year|avg(((CAST(SecurityDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+---------------------------------------------------------------------------------------+
|2003|                                                                                    0.0|
|2004|                                                                                    0.0|
|2005|                                                                                    0.0|
|2006|                                                                                    0.0|
|2007|                                                                    0.22865853658536586|
|2008|                                                                                    0.0|
|2009|                                                                                    0.0|
|2010|                                                                                    0.0|
+----+---------------------------------------------------------------------------------------+

Time taken: 507 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((SecurityDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+---------------------------------------------------------------------------------------+
|Year|avg(((CAST(SecurityDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+---------------------------------------------------------------------------------------+
|2003|                                                                                    0.0|
|2004|                                                                                    0.0|
|2005|                                                                                    0.0|
|2006|                                                                                    0.0|
|2007|                                                                    0.22865853658536586|
|2008|                                                                                    0.0|
|2009|                                                                                    0.0|
|2010|                                                                                    0.0|
+----+---------------------------------------------------------------------------------------+

Time taken: 333 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((SecurityDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+---------------------------------------------------------------------------------------+
|Year|avg(((CAST(SecurityDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+---------------------------------------------------------------------------------------+
|2003|                                                                                    0.0|
|2004|                                                                                    0.0|
|2005|                                                                                    0.0|
|2006|                                                                                    0.0|
|2007|                                                                    0.22865853658536586|
|2008|                                                                                    0.0|
|2009|                                                                                    0.0|
|2010|                                                                                    0.0|
+----+---------------------------------------------------------------------------------------+

Time taken: 396 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((SecurityDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     | }
+----+---------------------------------------------------------------------------------------+
|Year|avg(((CAST(SecurityDelay AS DOUBLE) / CAST(ArrDelay AS DOUBLE)) * CAST(100 AS DOUBLE)))|
+----+---------------------------------------------------------------------------------------+
|2003|                                                                                    0.0|
|2004|                                                                                    0.0|
|2005|                                                                                    0.0|
|2006|                                                                                    0.0|
|2007|                                                                    0.22865853658536586|
|2008|                                                                                    0.0|
|2009|                                                                                    0.0|
|2010|                                                                                    0.0|
+----+---------------------------------------------------------------------------------------+

Time taken: 358 ms

scala> spark.time {
     | val results = spark.sql("SELECT Year, avg((SecurityDelay/ArrDelay)*100) FROM DelayedFlights WHERE Year BETWEEN 2003 AND 2010 GROUP BY Year ORDER BY Year ASC").show()
     |
